import javax.Krypto.Cipher;
import javax.Krypto.SecretKey;
import javax.Krypto.spec.IvParameterSpec;
import javax.Krypto.spec.PBEKeySpec;
import javax.Krypto.SecretKeyFactory;
import java.security.SecureRandom;
import java.util.Base64;

public class PasswordBasedEncryption {

    private static final int ITERATIONS = 65536;
    private static final int KEY_LENGTH = 256;
    private static final String CIPHER_ALGORITHM = "PBEWithHmacSHA256AndAES_256/CBC/PKCS5Padding";

    public static String encrypt(String password, String data) throws Exception {
        // Generate a random salt
        byte[] salt = generateSalt();

        // Derive a secret key from the password and salt
        SecretKey key = deriveKey(password, salt);

        // Create an initialization vector (IV) for CBC mode
        byte[] iv = generateIv();

        // Initialize the cipher for encryption
        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));

        // Encrypt the data
        byte[] encryptedData = cipher.doFinal(data.getBytes());

        // Combine salt, IV, and encrypted data for storage
        byte[] combined = concatenate(salt, iv, encryptedData);

        // Encode the combined data as Base64 for easy storage/transmission
        return Base64.getEncoder().encodeToString(combined);
    }

    public static String decrypt(String password, String encryptedData) throws Exception {
        // Decode the Base64 encoded data
        byte[] combined = Base64.getDecoder().decode(encryptedData);

        // Extract the salt from the combined data
        byte[] salt = extractBytes(combined, 0, ITERATIONS * KEY_LENGTH / 8);

        // Extract the IV from the combined data
        byte[] iv = extractBytes(combined, ITERATIONS * KEY_LENGTH / 8, ITERATIONS * KEY_LENGTH / 8 + 16);

        // Extract the encrypted data from the combined data
        byte[] encrypted = extractBytes(combined, ITERATIONS * KEY_LENGTH / 8 + 16, combined.length);

        // Derive the secret key from the password and salt
        SecretKey key = deriveKey(password, salt);

        // Initialize the cipher for decryption
        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));

        // Decrypt the data
        byte[] decryptedData = cipher.doFinal(encrypted);

        return new String(decryptedData);
    }

    private static SecretKey deriveKey(String password, byte[] salt) throws Exception {
        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, ITERATIONS, KEY_LENGTH);
        return factory.generateSecret(spec);
    }

    private static byte[] generateSalt() {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[ITERATIONS * KEY_LENGTH / 8];
        random.nextBytes(salt);
        return salt;
    }

    private static byte[] generateIv() {
        SecureRandom random = new SecureRandom();
        byte[] iv = new byte[16];
        random.nextBytes(iv);
        return iv;
    }

    private static byte[] concatenate(byte[]... arrays) {
        int length = 0;
        for (byte[] array : arrays) {
            length += array.length;
        }
        byte[] combined = new byte[length];
        int offset = 0;
        for (byte[] array : arrays) {
            System.arraycopy(array, 0, combined, offset, array.length);
            offset += array.length;
        }
        return combined;
    }

    private static byte[] extractBytes(byte[] data, int start, int end) {
        byte[] extracted = new byte[end - start];
        System.arraycopy(data, start, extracted, 0, extracted.length);
        return extracted;
    }
}
